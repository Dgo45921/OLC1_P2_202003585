/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,28],$V2=[1,29],$V3=[1,30],$V4=[1,31],$V5=[1,18],$V6=[1,13],$V7=[1,25],$V8=[1,26],$V9=[1,19],$Va=[1,20],$Vb=[1,21],$Vc=[1,22],$Vd=[1,24],$Ve=[5,7,8,9,10,11,39,78,83,94,97,100,106,109,111],$Vf=[5,7,8,9,10,11,39,78,80,81,83,84,93,94,97,100,102,103,106,109,111],$Vg=[1,42],$Vh=[21,39,55,64],$Vi=[1,67],$Vj=[1,68],$Vk=[1,69],$Vl=[1,70],$Vm=[1,71],$Vn=[1,72],$Vo=[1,53],$Vp=[1,73],$Vq=[1,74],$Vr=[1,76],$Vs=[1,75],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[1,80],$Vx=[1,66],$Vy=[1,51],$Vz=[1,52],$VA=[1,100],$VB=[1,97],$VC=[1,98],$VD=[1,102],$VE=[1,105],$VF=[1,106],$VG=[1,113],$VH=[1,114],$VI=[1,115],$VJ=[1,116],$VK=[1,117],$VL=[1,118],$VM=[1,119],$VN=[1,120],$VO=[1,121],$VP=[1,122],$VQ=[1,123],$VR=[1,124],$VS=[1,125],$VT=[21,41,45,46,47,48,49,52,53,54,55,56,57,58,59,65,66,67,93],$VU=[13,14,15,16,17,18,20,24,25,27,29,31,33,35,37,39,47,50],$VV=[1,143],$VW=[7,8,9,10,11,39,78,80,81,83,84,93,94,97,100,102,103,106,109],$VX=[5,7,8,9,10,11,13,14,15,16,17,18,20,24,25,27,29,31,33,35,37,39,47,50,78,80,81,83,84,93,94,97,100,102,103,106,109,111],$VY=[1,194],$VZ=[21,41,45,46,47,52,53,54,55,56,57,58,59,65,66,67,93],$V_=[21,41,45,52,53,58,59,65,66,67,93],$V$=[21,41,45,52,53,54,55,56,57,58,59,65,66,67,93],$V01=[21,45],$V11=[45,93],$V21=[93,102,103],$V31=[5,7,8,9,10,11,39,78,80,81,83,84,93,94,97,98,100,102,103,106,109,111];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCTIONS":4,"EOF":5,"TYPE":6,"reserved_char":7,"reserved_boolean":8,"reserved_int":9,"reserved_double":10,"reserved_string":11,"OPERAND":12,"integerNum":13,"decimalNum":14,"charValue":15,"stringValue":16,"reserved_false":17,"reserved_true":18,"CAST":19,"(":20,")":21,"EXPRESSION":22,"LOWER_UPPER":23,"reserved_toLower":24,"reserved_toUpper":25,"LENGTH":26,"reserved_length":27,"ROUND":28,"reserved_round":29,"TO_STRING":30,"reserved_tostring":31,"TO_CHAR_ARRAY":32,"reserved_toCharArray":33,"TRUNCATE":34,"reserved_truncate":35,"TYPE_OF":36,"reserved_typeof":37,"INCREASE":38,"identifier":39,"++":40,";":41,"DECREASE":42,"--":43,"EXPRESSIONS":44,",":45,"+":46,"-":47,"*":48,"/":49,"!":50,"EXPRESION":51,"==":52,"!=":53,"<":54,">":55,"<=":56,">=":57,"&&":58,"||":59,"VECTOR_ACCESS":60,"LIST_ACCESS":61,"FUNCTION_CALL":62,"TERNARY":63,"[":64,"]":65,"?":66,":":67,"INSTRUCTION":68,"INSTRUCTIONS2":69,"INSTRUCTION2":70,"DECLARATION":71,"LIST_ADDITION":72,"IF_STATEMENT":73,"SWITCH_STATEMENT":74,"FOR_STATEMENT":75,"DO_WHILE_STATEMENT":76,"FUNCTION_DECLARATION":77,"FUNCTION_CALL2":78,"PRINT":79,"reserved_break":80,"reserved_continue":81,"RETURN_STATEMENT":82,"reserved_print":83,"reserved_return":84,"VARIABLE_DECLARATION":85,"VECTOR_DECLARATION":86,"LIST_DECLARATION":87,"=":88,"VARIABLE_ASIGNATION":89,"reserved_new":90,"{":91,"VALUE_LIST":92,"}":93,"reserved_list":94,".":95,"reserved_add":96,"reserved_if":97,"reserved_else":98,"ELSE_IF_STATEMENT":99,"reserved_switch":100,"CASE_LIST":101,"reserved_default":102,"reserved_case":103,"WHILE_STATEMENT":104,"reserved_while":105,"reserved_for":106,"FOR_FIRST_CONDITION":107,"FOR_THIRD_CONDITION":108,"reserved_do":109,"PARAMETERS":110,"reserved_void":111,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"reserved_char",8:"reserved_boolean",9:"reserved_int",10:"reserved_double",11:"reserved_string",13:"integerNum",14:"decimalNum",15:"charValue",16:"stringValue",17:"reserved_false",18:"reserved_true",20:"(",21:")",24:"reserved_toLower",25:"reserved_toUpper",27:"reserved_length",29:"reserved_round",31:"reserved_tostring",33:"reserved_toCharArray",35:"reserved_truncate",37:"reserved_typeof",39:"identifier",40:"++",41:";",43:"--",45:",",46:"+",47:"-",48:"*",49:"/",50:"!",51:"EXPRESION",52:"==",53:"!=",54:"<",55:">",56:"<=",57:">=",58:"&&",59:"||",64:"[",65:"]",66:"?",67:":",78:"FUNCTION_CALL2",80:"reserved_break",81:"reserved_continue",83:"reserved_print",84:"reserved_return",88:"=",90:"reserved_new",91:"{",93:"}",94:"reserved_list",95:".",96:"reserved_add",97:"reserved_if",98:"reserved_else",100:"reserved_switch",102:"reserved_default",103:"reserved_case",105:"reserved_while",106:"reserved_for",109:"reserved_do",111:"reserved_void"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[19,4],[23,4],[23,4],[26,4],[28,4],[30,4],[32,4],[34,4],[36,4],[38,3],[42,3],[44,3],[44,1],[22,1],[22,3],[22,3],[22,3],[22,3],[22,2],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[60,4],[61,6],[62,4],[62,3],[63,5],[4,2],[4,1],[69,2],[69,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,2],[70,2],[70,1],[70,1],[70,1],[79,5],[82,2],[82,3],[71,1],[71,1],[71,1],[85,3],[85,5],[89,4],[89,4],[86,11],[86,9],[92,3],[92,1],[87,12],[72,7],[73,7],[73,11],[73,8],[73,12],[99,9],[99,8],[74,7],[74,9],[74,10],[101,5],[101,4],[104,7],[75,9],[107,1],[107,1],[108,2],[108,2],[108,3],[76,9],[77,8],[77,8],[110,4],[110,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log('ya entre'); return $$[$0-1];
break;
case 7:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.INT);
break;
case 8:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.DOUBLE);
break;
case 9:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.CHAR);
break;
case 10:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.STRING);
break;
case 11: case 12:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.BOOLEAN);
break;
case 60:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]; console.log('entre a instrucciones');
break;
case 61:
this.$ = [$$[$0]]; console.log('entre a instruccion');
break;
case 74: case 87:
this.$ = $$[$0];
break;
case 88:
this.$ = new Print(_$[$0-4].first_line,_$[$0-4].first_column ,$$[$0-2])
break;
}
},
table: [{3:1,4:2,6:23,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:6,39:$V5,42:7,68:3,71:4,72:5,73:8,74:9,75:10,76:11,77:12,78:$V6,79:14,83:$V7,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc,111:$Vd},{1:[3]},{5:[1,32],6:23,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:6,39:$V5,42:7,68:33,71:4,72:5,73:8,74:9,75:10,76:11,77:12,78:$V6,79:14,83:$V7,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc,111:$Vd},o($Ve,[2,61]),o($Ve,[2,64]),o($Ve,[2,65]),o($Ve,[2,66]),o($Ve,[2,67]),o($Ve,[2,68]),o($Ve,[2,69]),o($Ve,[2,70]),o($Ve,[2,71]),o($Ve,[2,72]),o($Ve,[2,73]),o($Ve,[2,74]),o($Vf,[2,91]),o($Vf,[2,92]),o($Vf,[2,93]),{40:[1,35],43:[1,36],95:[1,34]},{20:[1,37]},{20:[1,38]},{20:[1,39]},{91:[1,40]},{39:[1,41],64:$Vg},{39:[1,43]},{20:[1,44]},{54:[1,45]},o($Vh,[2,2]),o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),{1:[2,1]},o($Ve,[2,60]),{96:[1,46]},{41:[1,47]},{41:[1,48]},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:49,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:81,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{6:86,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,39:[1,85],85:84,89:83,107:82},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,69:87,70:88,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{20:[1,104],41:$VE,88:$VF},{65:[1,107]},{20:[1,108]},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:109,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{6:110,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4},{20:[1,111]},o($Vf,[2,22]),o($Vf,[2,23]),{21:[1,112],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},o($VT,[2,26]),{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:126,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{51:[1,127]},{6:129,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:128,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},o($VT,[2,42]),o($VT,[2,43]),o($VT,[2,44]),o($VT,[2,45]),o($VT,[2,46]),o($VT,[2,47]),o($VT,[2,48]),o($VT,[2,49]),o($VT,[2,50]),o($VT,[2,51]),o($VT,[2,52]),o($VT,[2,53]),o($VT,[2,54],{20:[1,131],64:[1,130]}),o($VT,[2,7]),o($VT,[2,8]),o($VT,[2,9]),o($VT,[2,10]),o($VT,[2,11]),o($VT,[2,12]),{20:[1,132]},{20:[1,133]},{20:[1,134]},{20:[1,135]},{20:[1,136]},{20:[1,137]},{20:[1,138]},{20:[1,139]},{21:[1,140],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:141,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},o($VU,[2,117]),o($VU,[2,118]),{88:[1,142]},{39:$VV},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,70:145,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,93:[1,144],94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},o($VW,[2,63]),o($VW,[2,75]),o($VW,[2,76]),o($VW,[2,77]),o($VW,[2,78]),o($VW,[2,79]),o($VW,[2,80]),o($VW,[2,81]),o($VW,[2,82]),{41:[1,146]},{41:[1,147]},o($VW,[2,85]),o($VW,[2,86]),o($VW,[2,87]),{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:149,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,41:[1,148],47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{39:$VV,64:$Vg},{6:151,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,110:150},o($VX,[2,94]),{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:152,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{39:[1,153]},{6:151,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,110:154},{21:[1,155],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{55:[1,156]},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:157,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{91:[1,158]},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:159,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:160,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:161,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:162,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:163,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:164,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:165,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:166,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:167,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:168,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:169,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:170,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:171,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},o($VT,[2,31]),o($VT,[2,32]),{21:[1,172],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{21:[1,173]},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:174,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65,64:[1,175]},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,21:[1,177],22:178,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,44:176,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:179,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:180,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:181,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:182,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:183,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:184,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:185,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:186,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{91:[1,187]},{41:[1,188],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{12:189,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,39:[1,190]},{41:$VE,88:$VF},{105:[1,191]},o($VW,[2,62]),o($VW,[2,83]),o($VW,[2,84]),o($VW,[2,89]),{41:[1,192],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{21:[1,193],45:$VY},{39:[1,195]},{41:[1,196],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{88:[1,197]},{21:[1,198],45:$VY},{41:[1,199]},{39:[1,200]},{21:[1,201],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,69:202,70:88,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},o($VZ,[2,27],{48:$VI,49:$VJ}),o($VZ,[2,28],{48:$VI,49:$VJ}),o($VT,[2,29]),o($VT,[2,30]),o($V_,[2,34],{46:$VG,47:$VH,48:$VI,49:$VJ,54:$VM,55:$VN,56:$VO,57:$VP}),o($V_,[2,35],{46:$VG,47:$VH,48:$VI,49:$VJ,54:$VM,55:$VN,56:$VO,57:$VP}),o($V$,[2,36],{46:$VG,47:$VH,48:$VI,49:$VJ}),o($V$,[2,37],{46:$VG,47:$VH,48:$VI,49:$VJ}),o($V$,[2,38],{46:$VG,47:$VH,48:$VI,49:$VJ}),o($V$,[2,39],{46:$VG,47:$VH,48:$VI,49:$VJ}),o([21,41,45,58,59,65,66,67,93],[2,40],{46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP}),o([21,41,45,59,65,66,67,93],[2,41],{46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ}),{46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS,67:[1,203]},o($VT,[2,33]),{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:204,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,65:[1,205],66:$VS},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:206,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{21:[1,207],45:[1,208]},o($VT,[2,58]),o($V01,[2,25],{46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS}),{21:[1,209],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{21:[1,210],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{21:[1,211],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{21:[1,212],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{21:[1,213],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{21:[1,214],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{21:[1,215],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{21:[1,216],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{101:217,102:[1,218],103:[1,219]},{21:[1,220]},{41:[1,221]},{41:[1,222]},{20:[1,223]},o($VW,[2,90]),{91:[1,224]},{6:225,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4},o($V01,[2,126]),o($VX,[2,95]),{90:[1,226],91:[1,227]},{91:[1,228]},o($Vf,[2,88]),{88:[1,229]},{41:[1,230]},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,70:145,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,93:[1,231],94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:232,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},o($VT,[2,13]),o($VT,[2,55]),{46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,65:[1,233],66:$VS},o($VT,[2,57]),{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:234,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},o($VT,[2,14]),o($VT,[2,15]),o($VT,[2,17]),o($VT,[2,16]),o($VT,[2,18]),o($VT,[2,19]),o($VT,[2,20]),o($VT,[2,21]),{93:[1,235],102:[1,236],103:[1,237]},{67:[1,238]},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:239,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{91:[1,240]},o($VU,[2,96]),o($VU,[2,97]),{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:241,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,69:242,70:88,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{39:[1,243]},{6:244,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:246,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65,92:245},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,69:247,70:88,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{90:[1,248]},o($Vf,[2,103]),o($Vf,[2,104],{99:250,98:[1,249]}),o([21,41,45,65,66,67,93],[2,59],{46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR}),{65:[1,251]},o($V01,[2,24],{46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS}),o($Vf,[2,110]),{67:[1,252]},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:253,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,69:254,70:88,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS,67:[1,255]},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,69:256,70:88,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{21:[1,257],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,70:145,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,93:[1,258],94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},o($V01,[2,125]),{64:[1,259]},{45:[1,261],93:[1,260]},o($V11,[2,101],{46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS}),{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,70:145,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,93:[1,262],94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{94:[1,263]},{91:[1,264],97:[1,265]},o($Vf,[2,106],{98:[1,266]}),o($VT,[2,56]),{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,69:267,70:88,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS,67:[1,268]},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,70:145,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,93:[1,269],94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,69:270,70:88,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,70:145,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,93:[1,271],94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{41:[1,272]},o($Ve,[2,123]),{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:273,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{41:[1,274]},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:275,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},o($Ve,[2,124]),{54:[1,276]},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,69:277,70:88,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{20:[1,278]},{91:[1,279],97:[1,280]},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,70:145,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,93:[1,281],94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,69:282,70:88,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},o($Vf,[2,111]),o($V21,[2,114],{85:15,86:16,87:17,71:89,72:90,38:91,42:92,73:93,74:94,75:95,76:96,82:99,79:101,6:103,70:145,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,39:$V5,78:$VA,80:$VB,81:$VC,83:$V7,84:$VD,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc}),o($Vf,[2,116]),o($Vf,[2,122]),{46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,65:[1,283],66:$VS},o($Vf,[2,99]),o($V11,[2,100],{46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS}),{6:284,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,70:145,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,93:[1,285],94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:286,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,69:287,70:88,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{20:[1,288]},o($Vf,[2,112]),o($V21,[2,113],{85:15,86:16,87:17,71:89,72:90,38:91,42:92,73:93,74:94,75:95,76:96,82:99,79:101,6:103,70:145,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,39:$V5,78:$VA,80:$VB,81:$VC,83:$V7,84:$VD,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc}),{41:[1,289]},{55:[1,290]},o($Vf,[2,105]),{21:[1,291],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,70:145,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,93:[1,292],94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{12:50,13:$Vi,14:$Vj,15:$Vk,16:$Vl,17:$Vm,18:$Vn,19:54,20:$Vo,22:293,23:55,24:$Vp,25:$Vq,26:57,27:$Vr,28:56,29:$Vs,30:58,31:$Vt,32:59,33:$Vu,34:60,35:$Vv,36:61,37:$Vw,39:$Vx,47:$Vy,50:$Vz,60:62,61:63,62:64,63:65},o($Vf,[2,98]),{41:[1,294]},{91:[1,295]},o($Vf,[2,107]),{21:[1,296],46:$VG,47:$VH,48:$VI,49:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,66:$VS},o($Vf,[2,102]),{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,69:297,70:88,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{91:[1,298]},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,70:145,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,93:[1,299],94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,69:300,70:88,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},o($V31,[2,109]),{6:103,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,38:91,39:$V5,42:92,70:145,71:89,72:90,73:93,74:94,75:95,76:96,78:$VA,79:101,80:$VB,81:$VC,82:99,83:$V7,84:$VD,85:15,86:16,87:17,93:[1,301],94:$V8,97:$V9,100:$Va,106:$Vb,109:$Vc},o($V31,[2,108])],
defaultActions: {32:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  // importar tipos
  const {Primitive} = require('./expressions/Primitive')
  const {Print} = require('./instruction/Print')
  const {Type} = require('./abstract/Type')

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:console.log("Se encontró token con valor: " + yy_.yytext); return 9;
break;
case 4:console.log("Se encontró token con valor: " + yy_.yytext); return 18;
break;
case 5:console.log("Se encontró token con valor: " + yy_.yytext); return 17;
break;
case 6:console.log("Se encontró token con valor: " + yy_.yytext); return 10;
break;
case 7:console.log("Se encontró token con valor: " + yy_.yytext); return 8;
break;
case 8:console.log("Se encontró token con valor: " + yy_.yytext); return 7;
break;
case 9:console.log("Se encontró token con valor: " + yy_.yytext); return 11;
break;
case 10:console.log("Se encontró token con valor: " + yy_.yytext); return 94;
break;
case 11:console.log("Se encontró token con valor: " + yy_.yytext); return 96;
break;
case 12:console.log("Se encontró token con valor: " + yy_.yytext); return 97;
break;
case 13:console.log("Se encontró token con valor: " + yy_.yytext); return 98;
break;
case 14:console.log("Se encontró token print con valor: " + yy_.yytext); return 83;
break;
case 15:console.log("Se encontró token con valor: " + yy_.yytext); return 100;
break;
case 16:console.log("Se encontró token con valor: " + yy_.yytext); return 103;
break;
case 17:console.log("Se encontró token con valor: " + yy_.yytext); return 102;
break;
case 18:console.log("Se encontró token con valor: " + yy_.yytext); return 80;
break;
case 19:console.log("Se encontró token con valor: " + yy_.yytext); return 105;
break;
case 20:console.log("Se encontró token con valor: " + yy_.yytext); return 106;
break;
case 21:console.log("Se encontró token con valor: " + yy_.yytext); return 109;
break;
case 22:console.log("Se encontró token con valor: " + yy_.yytext); return 81;
break;
case 23:console.log("Se encontró token con valor: " + yy_.yytext); return 84;
break;
case 24:console.log("Se encontró token con valor: " + yy_.yytext); return 111;
break;
case 25:console.log("Se encontró token con valor: " + yy_.yytext); return 24;
break;
case 26:console.log("Se encontró token con valor: " + yy_.yytext); return 25;
break;
case 27:console.log("Se encontró token con valor: " + yy_.yytext); return 27;
break;
case 28:console.log("Se encontró token con valor: " + yy_.yytext); return 35;
break;
case 29:console.log("Se encontró token con valor: " + yy_.yytext); return 29;
break;
case 30:console.log("Se encontró token con valor: " + yy_.yytext); return 37;
break;
case 31:console.log("Se encontró token con valor: " + yy_.yytext); return 31;
break;
case 32:console.log("Se encontró token con valor: " + yy_.yytext); return 33;
break;
case 33:console.log("Se encontró token con valor: " + yy_.yytext); return 'reserved_main';
break;
case 34:console.log("Se encontró token con valor: " + yy_.yytext); return 90;
break;
case 35:console.log("Se encontró token id con valor: " + yy_.yytext); return 39;
break;
case 36:console.log("Se encontró token con valor: " + yy_.yytext); return 14;
break;
case 37:console.log("Se encontró token con valor: " + yy_.yytext); return 13;
break;
case 38:console.log("Se encontró token con valor: " + yy_.yytext); return 15;
break;
case 39:console.log("Se encontró token con valor: " + yy_.yytext); return 16;
break;
case 40:console.log("Se encontró token con valor: " + yy_.yytext);     return 41;
break;
case 41:console.log("Se encontró token con valor: " + yy_.yytext);     return 46;
break;
case 42:console.log("Se encontró token con valor: " + yy_.yytext);     return 47;
break;
case 43:console.log("Se encontró token con valor: " + yy_.yytext);    return 40;
break;
case 44:console.log("Se encontró token con valor: " + yy_.yytext);    return 43;
break;
case 45:console.log("Se encontró token con valor: " + yy_.yytext);     return 48;
break;
case 46:console.log("Se encontró token con valor: " + yy_.yytext);     return 49;
break;
case 47:console.log("Se encontró token con valor: " + yy_.yytext);     return '^';
break;
case 48:console.log("Se encontró token con valor: " + yy_.yytext);     return '%';
break;
case 49:console.log("Se encontró token con valor: " + yy_.yytext);     return 88;
break;
case 50:console.log("Se encontró token con valor: " + yy_.yytext);     return 52;
break;
case 51:console.log("Se encontró token con valor: " + yy_.yytext);     return 53;
break;
case 52:console.log("Se encontró token con valor: " + yy_.yytext);     return 54;
break;
case 53:console.log("Se encontró token con valor: " + yy_.yytext);     return 55;
break;
case 54:console.log("Se encontró token con valor: " + yy_.yytext);     return 56;
break;
case 55:console.log("Se encontró token con valor: " + yy_.yytext);     return 57;
break;
case 56:console.log("Se encontró token con valor: " + yy_.yytext);     return 50;
break;
case 57:console.log("Se encontró token con valor: " + yy_.yytext);     return 66;
break;
case 58:console.log("Se encontró token con valor: " + yy_.yytext);     return 67;
break;
case 59:console.log("Se encontró token con valor: " + yy_.yytext);     return 59;
break;
case 60:console.log("Se encontró token con valor: " + yy_.yytext);     return 58;
break;
case 61:console.log("Se encontró token con valor: " + yy_.yytext);     return 20;
break;
case 62:console.log("Se encontró token con valor: " + yy_.yytext);     return 21;
break;
case 63:console.log("Se encontró token con valor: " + yy_.yytext);     return 91;
break;
case 64:console.log("Se encontró token con valor: " + yy_.yytext);     return 93;
break;
case 65:console.log("Se encontró token con valor: " + yy_.yytext);     return 45;
break;
case 66:console.log("Se encontró token con valor: " + yy_.yytext);     return 64;
break;
case 67:console.log("Se encontró token con valor: " + yy_.yytext);     return 65;
break;
case 68:console.log("Se encontró token con valor: " + yy_.yytext);     return 95;
break;
case 69:return 5;
break;
case 70: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[\r|\f|\s|\t|\n])/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:print\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Length\b)/i,/^(?:Truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:new\b)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:[\']([^']|\\n|\\t|(\\)(\\))?[\'])/i,/^(?:[\"](\\"|[^"])*[\"])/i,/^(?:;)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
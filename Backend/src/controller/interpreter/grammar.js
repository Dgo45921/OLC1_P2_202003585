/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,5],$V6=[1,10],$V7=[1,12],$V8=[5,7,8,9,10,11,73,83,94],$V9=[21,39,56,65],$Va=[1,26],$Vb=[1,45],$Vc=[1,46],$Vd=[1,47],$Ve=[1,48],$Vf=[1,49],$Vg=[1,50],$Vh=[1,31],$Vi=[1,51],$Vj=[1,52],$Vk=[1,54],$Vl=[1,53],$Vm=[1,55],$Vn=[1,56],$Vo=[1,57],$Vp=[1,58],$Vq=[1,44],$Vr=[1,29],$Vs=[1,30],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[1,79],$VG=[1,80],$VH=[21,41,45,46,47,48,49,50,53,54,55,56,57,58,59,60,66,67,68,93],$VI=[5,7,8,9,10,11,21,41,45,46,47,48,49,50,53,54,55,56,57,58,59,60,66,67,68,73,83,93,94],$VJ=[21,45],$VK=[21,41,45,46,47,50,53,54,55,56,57,58,59,60,66,67,68,93],$VL=[21,41,45,50,53,54,59,60,66,67,68,93],$VM=[21,41,45,50,53,54,55,56,57,58,59,60,66,67,68,93],$VN=[45,93];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCTIONS":4,"EOF":5,"TYPE":6,"reserved_char":7,"reserved_boolean":8,"reserved_int":9,"reserved_double":10,"reserved_string":11,"OPERAND":12,"integerNum":13,"decimalNum":14,"charValue":15,"stringValue":16,"reserved_false":17,"reserved_true":18,"CAST":19,"(":20,")":21,"EXPRESSION":22,"LOWER_UPPER":23,"reserved_toLower":24,"reserved_toUpper":25,"LENGTH":26,"reserved_length":27,"ROUND":28,"reserved_round":29,"TO_STRING":30,"reserved_tostring":31,"TO_CHAR_ARRAY":32,"reserved_toCharArray":33,"TRUNCATE":34,"reserved_truncate":35,"TYPE_OF":36,"reserved_typeof":37,"INCREASE":38,"identifier":39,"++":40,";":41,"DECREASE":42,"--":43,"EXPRESSIONS":44,",":45,"+":46,"-":47,"*":48,"/":49,"^":50,"!":51,"EXPRESION":52,"==":53,"!=":54,"<":55,">":56,"<=":57,">=":58,"&&":59,"||":60,"VECTOR_ACCESS":61,"LIST_ACCESS":62,"FUNCTION_CALL":63,"TERNARY":64,"[":65,"]":66,"?":67,":":68,"INSTRUCTION":69,"INSTRUCTIONS2":70,"INSTRUCTION2":71,"DECLARATION":72,"reserved_main":73,"PRINT":74,"LIST_ADDITION":75,"IF_STATEMENT":76,"SWITCH_STATEMENT":77,"FOR_STATEMENT":78,"DO_WHILE_STATEMENT":79,"reserved_break":80,"reserved_continue":81,"RETURN_STATEMENT":82,"reserved_print":83,"reserved_return":84,"VARIABLE_DECLARATION":85,"VECTOR_DECLARATION":86,"LIST_DECLARATION":87,"=":88,"VARIABLE_ASIGNATION":89,"reserved_new":90,"{":91,"VALUE_LIST":92,"}":93,"reserved_list":94,".":95,"reserved_add":96,"reserved_if":97,"reserved_else":98,"ELSE_IF_STATEMENT":99,"reserved_switch":100,"CASE_LIST":101,"reserved_default":102,"reserved_case":103,"WHILE_STATEMENT":104,"reserved_while":105,"reserved_for":106,"FOR_FIRST_CONDITION":107,"FOR_THIRD_CONDITION":108,"reserved_do":109,"FUNCTION_DECLARATION":110,"PARAMETERS":111,"reserved_void":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"reserved_char",8:"reserved_boolean",9:"reserved_int",10:"reserved_double",11:"reserved_string",13:"integerNum",14:"decimalNum",15:"charValue",16:"stringValue",17:"reserved_false",18:"reserved_true",20:"(",21:")",24:"reserved_toLower",25:"reserved_toUpper",27:"reserved_length",29:"reserved_round",31:"reserved_tostring",33:"reserved_toCharArray",35:"reserved_truncate",37:"reserved_typeof",39:"identifier",40:"++",41:";",43:"--",45:",",46:"+",47:"-",48:"*",49:"/",50:"^",51:"!",52:"EXPRESION",53:"==",54:"!=",55:"<",56:">",57:"<=",58:">=",59:"&&",60:"||",65:"[",66:"]",67:"?",68:":",73:"reserved_main",80:"reserved_break",81:"reserved_continue",83:"reserved_print",84:"reserved_return",88:"=",90:"reserved_new",91:"{",93:"}",94:"reserved_list",95:".",96:"reserved_add",97:"reserved_if",98:"reserved_else",100:"reserved_switch",102:"reserved_default",103:"reserved_case",105:"reserved_while",106:"reserved_for",109:"reserved_do",112:"reserved_void"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[19,4],[23,4],[23,4],[26,4],[28,4],[30,4],[32,4],[34,4],[36,4],[38,3],[42,3],[44,3],[44,1],[22,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[61,4],[62,6],[63,4],[63,3],[64,5],[4,2],[4,1],[70,2],[70,1],[69,1],[69,2],[69,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,2],[71,2],[71,1],[71,1],[71,1],[74,5],[82,2],[82,3],[72,1],[72,1],[72,1],[85,3],[85,5],[89,4],[89,4],[86,11],[86,9],[92,3],[92,1],[87,12],[75,7],[76,7],[76,11],[76,8],[76,12],[99,9],[99,8],[77,7],[77,9],[77,10],[101,5],[101,4],[104,7],[78,9],[107,1],[107,1],[108,2],[108,2],[108,3],[79,9],[110,8],[110,8],[111,4],[111,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log('ya entre'); return $$[$0-1];
break;
case 7:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.INT);
break;
case 8:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.DOUBLE);
break;
case 9:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.CHAR);
break;
case 10:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.STRING);
break;
case 11: case 12:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.BOOLEAN);
break;
case 26:
this.$=$$[$0];
break;
case 27:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'plus', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 28:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'minus', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 29:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'multiply', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 30:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'division', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 31:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'power', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 32:
this.$= new ArithmeticOperation($$[$0],$$[$0],'negation', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 61:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]; console.log('entre a instrucciones');
break;
case 62:
this.$ = [$$[$0]]; console.log('entre a instruccion');
break;
case 67: case 80:
this.$ = $$[$0];
break;
case 81:
this.$ = new Print(_$[$0-4].first_line,_$[$0-4].first_column ,$$[$0-2])
break;
}
},
table: [{3:1,4:2,6:11,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,69:3,72:4,73:$V5,74:6,83:$V6,85:7,86:8,87:9,94:$V7},{1:[3]},{5:[1,18],6:11,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,69:19,72:4,73:$V5,74:6,83:$V6,85:7,86:8,87:9,94:$V7},o($V8,[2,62]),o($V8,[2,65]),{39:[1,21],63:20},o($V8,[2,67]),o($V8,[2,84]),o($V8,[2,85]),o($V8,[2,86]),{20:[1,22]},{39:[1,23],65:[1,24]},{55:[1,25]},o($V9,[2,2]),o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),{1:[2,1]},o($V8,[2,61]),o($V8,[2,66]),{20:$Va},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:27,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{41:[1,59],88:[1,60]},{66:[1,61]},{6:62,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,21:[1,64],22:65,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,44:63,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{21:[1,66],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG},o($VH,[2,26]),{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:81,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{52:[1,82]},{6:84,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4,12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:83,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},o($VH,[2,43]),o($VH,[2,44]),o($VH,[2,45]),o($VH,[2,46]),o($VH,[2,47]),o($VH,[2,48]),o($VH,[2,49]),o($VH,[2,50]),o($VH,[2,51]),o($VH,[2,52]),o($VH,[2,53]),o($VH,[2,54]),o($VH,[2,55],{20:$Va,65:[1,85]}),o($VH,[2,7]),o($VH,[2,8]),o($VH,[2,9]),o($VH,[2,10]),o($VH,[2,11]),o($VH,[2,12]),{20:[1,86]},{20:[1,87]},{20:[1,88]},{20:[1,89]},{20:[1,90]},{20:[1,91]},{20:[1,92]},{20:[1,93]},o($V8,[2,87]),{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:94,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{39:[1,95]},{56:[1,96]},{21:[1,97],45:[1,98]},o($VI,[2,59]),o($VJ,[2,25],{46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG}),{41:[1,99]},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:100,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:101,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:102,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:103,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:104,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:105,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:106,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:107,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:108,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:109,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:110,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:111,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:112,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:113,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},o($VH,[2,32]),o($VH,[2,33]),{21:[1,114],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG},{21:[1,115]},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:116,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43,65:[1,117]},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:118,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:119,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:120,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:121,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:122,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:123,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:124,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:125,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{41:[1,126],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG},{88:[1,127]},{39:[1,128]},o($VI,[2,58]),{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:129,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},o($V8,[2,81]),o($VK,[2,27],{48:$Vv,49:$Vw}),o($VK,[2,28],{48:$Vv,49:$Vw}),o($VH,[2,29]),o($VH,[2,30]),o([21,41,45,50,66,67,68,93],[2,31],{46:$Vt,47:$Vu,48:$Vv,49:$Vw,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF}),o($VL,[2,35],{46:$Vt,47:$Vu,48:$Vv,49:$Vw,55:$VA,56:$VB,57:$VC,58:$VD}),o($VL,[2,36],{46:$Vt,47:$Vu,48:$Vv,49:$Vw,55:$VA,56:$VB,57:$VC,58:$VD}),o($VM,[2,37],{46:$Vt,47:$Vu,48:$Vv,49:$Vw}),o($VM,[2,38],{46:$Vt,47:$Vu,48:$Vv,49:$Vw}),o($VM,[2,39],{46:$Vt,47:$Vu,48:$Vv,49:$Vw}),o($VM,[2,40],{46:$Vt,47:$Vu,48:$Vv,49:$Vw}),o([21,41,45,50,59,60,66,67,68,93],[2,41],{46:$Vt,47:$Vu,48:$Vv,49:$Vw,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD}),o([21,41,45,50,60,66,67,68,93],[2,42],{46:$Vt,47:$Vu,48:$Vv,49:$Vw,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE}),{46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG,68:[1,130]},o($VH,[2,34]),{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:131,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,66:[1,132],67:$VG},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:133,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{21:[1,134],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG},{21:[1,135],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG},{21:[1,136],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG},{21:[1,137],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG},{21:[1,138],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG},{21:[1,139],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG},{21:[1,140],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG},{21:[1,141],46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG},o($V8,[2,88]),{90:[1,142],91:[1,143]},{88:[1,144]},o($VJ,[2,24],{46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG}),{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:145,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},o($VH,[2,13]),o($VH,[2,56]),{46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,66:[1,146],67:$VG},o($VH,[2,14]),o($VH,[2,15]),o($VH,[2,17]),o($VH,[2,16]),o($VH,[2,18]),o($VH,[2,19]),o($VH,[2,20]),o($VH,[2,21]),{6:147,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:149,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43,92:148},{90:[1,150]},o([21,41,45,66,67,68,93],[2,60],{46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF}),{66:[1,151]},{65:[1,152]},{45:[1,154],93:[1,153]},o($VN,[2,94],{46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG}),{94:[1,155]},o($VH,[2,57]),{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:156,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{41:[1,157]},{12:28,13:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:32,20:$Vh,22:158,23:33,24:$Vi,25:$Vj,26:35,27:$Vk,28:34,29:$Vl,30:36,31:$Vm,32:37,33:$Vn,34:38,35:$Vo,36:39,37:$Vp,39:$Vq,47:$Vr,51:$Vs,61:40,62:41,63:42,64:43},{55:[1,159]},{46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,66:[1,160],67:$VG},o($V8,[2,92]),o($VN,[2,93],{46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,67:$VG}),{6:161,7:$V0,8:$V1,9:$V2,10:$V3,11:$V4},{41:[1,162]},{56:[1,163]},o($V8,[2,91]),{41:[1,164]},o($V8,[2,95])],
defaultActions: {18:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  // importar tipos
  const {Primitive} = require('./expressions/Primitive')
  const {ArithmeticOperation} = require('./expressions/ArithmeticOperation')
  const {Print} = require('./instruction/Print')
  const {Type} = require('./abstract/Type')
  

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:console.log("Se encontró token con valor: " + yy_.yytext); return 9;
break;
case 4:console.log("Se encontró token con valor: " + yy_.yytext); return 18;
break;
case 5:console.log("Se encontró token con valor: " + yy_.yytext); return 17;
break;
case 6:console.log("Se encontró token con valor: " + yy_.yytext); return 10;
break;
case 7:console.log("Se encontró token con valor: " + yy_.yytext); return 8;
break;
case 8:console.log("Se encontró token con valor: " + yy_.yytext); return 7;
break;
case 9:console.log("Se encontró token con valor: " + yy_.yytext); return 11;
break;
case 10:console.log("Se encontró token con valor: " + yy_.yytext); return 94;
break;
case 11:console.log("Se encontró token con valor: " + yy_.yytext); return 96;
break;
case 12:console.log("Se encontró token con valor: " + yy_.yytext); return 97;
break;
case 13:console.log("Se encontró token con valor: " + yy_.yytext); return 98;
break;
case 14:console.log("Se encontró token print con valor: " + yy_.yytext); return 83;
break;
case 15:console.log("Se encontró token con valor: " + yy_.yytext); return 100;
break;
case 16:console.log("Se encontró token con valor: " + yy_.yytext); return 103;
break;
case 17:console.log("Se encontró token con valor: " + yy_.yytext); return 102;
break;
case 18:console.log("Se encontró token con valor: " + yy_.yytext); return 80;
break;
case 19:console.log("Se encontró token con valor: " + yy_.yytext); return 105;
break;
case 20:console.log("Se encontró token con valor: " + yy_.yytext); return 106;
break;
case 21:console.log("Se encontró token con valor: " + yy_.yytext); return 109;
break;
case 22:console.log("Se encontró token con valor: " + yy_.yytext); return 81;
break;
case 23:console.log("Se encontró token con valor: " + yy_.yytext); return 84;
break;
case 24:console.log("Se encontró token con valor: " + yy_.yytext); return 112;
break;
case 25:console.log("Se encontró token con valor: " + yy_.yytext); return 24;
break;
case 26:console.log("Se encontró token con valor: " + yy_.yytext); return 25;
break;
case 27:console.log("Se encontró token con valor: " + yy_.yytext); return 27;
break;
case 28:console.log("Se encontró token con valor: " + yy_.yytext); return 35;
break;
case 29:console.log("Se encontró token con valor: " + yy_.yytext); return 29;
break;
case 30:console.log("Se encontró token con valor: " + yy_.yytext); return 37;
break;
case 31:console.log("Se encontró token con valor: " + yy_.yytext); return 31;
break;
case 32:console.log("Se encontró token con valor: " + yy_.yytext); return 33;
break;
case 33:console.log("Se encontró token con valor: " + yy_.yytext); return 73;
break;
case 34:console.log("Se encontró token con valor: " + yy_.yytext); return 90;
break;
case 35:console.log("Se encontró token id con valor: " + yy_.yytext); return 39;
break;
case 36:console.log("Se encontró token con valor: " + yy_.yytext); return 14;
break;
case 37:console.log("Se encontró token con valor: " + yy_.yytext); return 13;
break;
case 38:console.log("Se encontró token con valor: " + yy_.yytext); return 15;
break;
case 39:console.log("Se encontró token con valor: " + yy_.yytext); return 16;
break;
case 40:console.log("Se encontró token con valor: " + yy_.yytext);     return 41;
break;
case 41:console.log("Se encontró token con valor: " + yy_.yytext);     return 46;
break;
case 42:console.log("Se encontró token con valor: " + yy_.yytext);     return 47;
break;
case 43:console.log("Se encontró token con valor: " + yy_.yytext);    return 40;
break;
case 44:console.log("Se encontró token con valor: " + yy_.yytext);    return 43;
break;
case 45:console.log("Se encontró token con valor: " + yy_.yytext);     return 48;
break;
case 46:console.log("Se encontró token con valor: " + yy_.yytext);     return 49;
break;
case 47:console.log("Se encontró token con valor: " + yy_.yytext);     return 50;
break;
case 48:console.log("Se encontró token con valor: " + yy_.yytext);     return '%';
break;
case 49:console.log("Se encontró token con valor: " + yy_.yytext);     return 88;
break;
case 50:console.log("Se encontró token con valor: " + yy_.yytext);     return 53;
break;
case 51:console.log("Se encontró token con valor: " + yy_.yytext);     return 54;
break;
case 52:console.log("Se encontró token con valor: " + yy_.yytext);     return 55;
break;
case 53:console.log("Se encontró token con valor: " + yy_.yytext);     return 56;
break;
case 54:console.log("Se encontró token con valor: " + yy_.yytext);     return 57;
break;
case 55:console.log("Se encontró token con valor: " + yy_.yytext);     return 58;
break;
case 56:console.log("Se encontró token con valor: " + yy_.yytext);     return 51;
break;
case 57:console.log("Se encontró token con valor: " + yy_.yytext);     return 67;
break;
case 58:console.log("Se encontró token con valor: " + yy_.yytext);     return 68;
break;
case 59:console.log("Se encontró token con valor: " + yy_.yytext);     return 60;
break;
case 60:console.log("Se encontró token con valor: " + yy_.yytext);     return 59;
break;
case 61:console.log("Se encontró token con valor: " + yy_.yytext);     return 20;
break;
case 62:console.log("Se encontró token con valor: " + yy_.yytext);     return 21;
break;
case 63:console.log("Se encontró token con valor: " + yy_.yytext);     return 91;
break;
case 64:console.log("Se encontró token con valor: " + yy_.yytext);     return 93;
break;
case 65:console.log("Se encontró token con valor: " + yy_.yytext);     return 45;
break;
case 66:console.log("Se encontró token con valor: " + yy_.yytext);     return 65;
break;
case 67:console.log("Se encontró token con valor: " + yy_.yytext);     return 66;
break;
case 68:console.log("Se encontró token con valor: " + yy_.yytext);     return 95;
break;
case 69:return 5;
break;
case 70: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[\r|\f|\s|\t|\n])/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:print\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Length\b)/i,/^(?:Truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:new\b)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:[\']([^']|\\n|\\t|(\\)(\\))?[\'])/i,/^(?:[\"](\\"|[^"])*[\"])/i,/^(?:;)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,17],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,5],$V7=[1,13],$V8=[1,14],$V9=[1,16],$Va=[2,5,7,8,9,10,11,78,92,97,105],$Vb=[2,5,7,8,9,10,11,39,78,89,90,92,93,97,101,105,108,111,113,114,115,118,119],$Vc=[1,30],$Vd=[21,39,52,63],$Ve=[1,33],$Vf=[1,52],$Vg=[1,53],$Vh=[1,54],$Vi=[1,55],$Vj=[1,56],$Vk=[1,57],$Vl=[1,37],$Vm=[1,58],$Vn=[1,59],$Vo=[1,61],$Vp=[1,60],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,51],$Vv=[1,36],$Vw=[1,38],$Vx=[1,69],$Vy=[1,68],$Vz=[2,62],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[1,85],$VK=[1,86],$VL=[1,87],$VM=[1,88],$VN=[1,89],$VO=[1,90],$VP=[21,43,44,45,46,47,48,49,50,51,52,53,54,57,58,64,67,71,72,73,101],$VQ=[2,134],$VR=[2,5,7,8,9,10,11,13,14,15,16,17,18,20,24,25,27,29,31,33,35,37,39,44,55,78,89,90,92,93,97,101,105,108,111,113,114,115,118,119],$VS=[21,71],$VT=[21,43,44,49,50,51,52,53,54,57,58,64,67,71,72,73,101],$VU=[21,43,44,45,46,48,49,50,51,52,53,54,57,58,64,67,71,72,73,101],$VV=[21,49,50,51,52,53,54,57,58,64,67,71,72,73,101],$VW=[1,162],$VX=[1,190],$VY=[1,183],$VZ=[1,184],$V_=[1,196],$V$=[1,191],$V01=[1,192],$V11=[1,193],$V21=[1,194],$V31=[1,195],$V41=[2,5,7,8,9,10,11,39,78,89,90,92,93,97,101,105,108,110,111,113,114,115,118,119],$V51=[7,8,9,10,11,39,89,90,92,93,101,105,108,111,113,114,115,118,119],$V61=[1,212],$V71=[1,213],$V81=[1,214],$V91=[1,223],$Va1=[71,101],$Vb1=[21,67],$Vc1=[13,14,15,16,17,18,20,24,25,27,29,31,33,35,37,39,44,55],$Vd1=[101,113,114];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCTIONS":4,"EOF":5,"TYPE":6,"reserved_char":7,"reserved_boolean":8,"reserved_int":9,"reserved_double":10,"reserved_string":11,"OPERAND":12,"integerNum":13,"decimalNum":14,"charValue":15,"stringValue":16,"reserved_false":17,"reserved_true":18,"CAST":19,"(":20,")":21,"EXPRESSION":22,"LOWER_UPPER":23,"reserved_toLower":24,"reserved_toUpper":25,"LENGTH":26,"reserved_length":27,"ROUND":28,"reserved_round":29,"TO_STRING":30,"reserved_tostring":31,"TO_CHAR_ARRAY":32,"reserved_toCharArray":33,"TRUNCATE":34,"reserved_truncate":35,"TYPE_OF":36,"reserved_typeof":37,"INCREASE":38,"identifier":39,"++":40,"DECREASE":41,"--":42,"+":43,"-":44,"*":45,"/":46,"^":47,"%":48,"==":49,"!=":50,"<":51,">":52,"<=":53,">=":54,"!":55,"EXPRESION":56,"&&":57,"||":58,"VECTOR_ACCESS":59,"LIST_ACCESS":60,"FUNCTION_CALL":61,"TERNARY":62,"[":63,"]":64,"VECTOR_MODIFICATION":65,"=":66,";":67,"LIST_MODIFICATION":68,"ARGUMENTS":69,"ARGUMENT":70,",":71,"?":72,":":73,"INSTRUCTION":74,"INSTRUCTIONS2":75,"INSTRUCTION2":76,"DECLARATION":77,"reserved_main":78,"PRINT":79,"METHOD_DECLARATION":80,"FUNCTION_DECLARATION":81,"LIST_ADDITION":82,"VARIABLE_ASIGNATION":83,"IF_STATEMENT":84,"SWITCH_STATEMENT":85,"FOR_STATEMENT":86,"DO_WHILE_STATEMENT":87,"WHILE_STATEMENT":88,"reserved_break":89,"reserved_continue":90,"RETURN_STATEMENT":91,"reserved_print":92,"reserved_return":93,"VARIABLE_DECLARATION":94,"VECTOR_DECLARATION":95,"LIST_DECLARATION":96,"reserved_void":97,"PARAMETERS":98,"BLOCK":99,"{":100,"}":101,"VARIABLE_ASIGNATION2":102,"reserved_new":103,"VALUE_LIST":104,"reserved_list":105,".":106,"reserved_add":107,"reserved_if":108,"ELSE_IF_STATEMENT":109,"reserved_else":110,"reserved_switch":111,"CASE_LIST":112,"reserved_default":113,"reserved_case":114,"reserved_for":115,"FOR_FIRST_CONDITION":116,"FOR_THIRD_CONDITION":117,"reserved_do":118,"reserved_while":119,"PARAMETER":120,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"reserved_char",8:"reserved_boolean",9:"reserved_int",10:"reserved_double",11:"reserved_string",13:"integerNum",14:"decimalNum",15:"charValue",16:"stringValue",17:"reserved_false",18:"reserved_true",20:"(",21:")",24:"reserved_toLower",25:"reserved_toUpper",27:"reserved_length",29:"reserved_round",31:"reserved_tostring",33:"reserved_toCharArray",35:"reserved_truncate",37:"reserved_typeof",39:"identifier",40:"++",42:"--",43:"+",44:"-",45:"*",46:"/",47:"^",48:"%",49:"==",50:"!=",51:"<",52:">",53:"<=",54:">=",55:"!",56:"EXPRESION",57:"&&",58:"||",63:"[",64:"]",66:"=",67:";",71:",",72:"?",73:":",78:"reserved_main",89:"reserved_break",90:"reserved_continue",92:"reserved_print",93:"reserved_return",97:"reserved_void",100:"{",101:"}",103:"reserved_new",105:"reserved_list",106:".",107:"reserved_add",108:"reserved_if",110:"reserved_else",111:"reserved_switch",113:"reserved_default",114:"reserved_case",115:"reserved_for",118:"reserved_do",119:"reserved_while"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[19,4],[23,4],[23,4],[26,4],[28,4],[30,4],[32,4],[34,4],[36,4],[38,2],[41,2],[22,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,3],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[59,4],[60,6],[65,7],[68,9],[61,4],[69,3],[69,1],[69,0],[70,1],[62,5],[4,2],[4,1],[75,2],[75,1],[74,1],[74,3],[74,1],[74,1],[74,1],[74,2],[76,1],[76,1],[76,2],[76,2],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,2],[76,2],[76,1],[76,2],[76,1],[76,1],[76,1],[79,5],[91,2],[91,3],[77,1],[77,1],[77,1],[80,6],[99,3],[99,2],[94,3],[94,5],[83,4],[102,3],[95,11],[95,9],[104,3],[104,1],[96,12],[96,11],[82,7],[84,6],[109,2],[109,2],[109,0],[85,7],[85,9],[85,10],[112,5],[112,4],[86,8],[86,8],[86,8],[116,1],[116,1],[117,2],[117,2],[117,3],[87,7],[88,5],[81,6],[98,3],[98,1],[98,0],[120,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log('ya entre'); return $$[$0-1];
break;
case 2:
this.$ = Type.CHAR 
break;
case 3:
this.$ = Type.BOOLEAN
break;
case 4:
this.$ = Type.INT
break;
case 5:
this.$ = Type.DOUBLE
break;
case 6:
this.$ = Type.STRING
break;
case 7:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.INT);
break;
case 8:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.DOUBLE);
break;
case 9:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.CHAR);
break;
case 10:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.STRING);
break;
case 11: case 12:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.BOOLEAN);
break;
case 13:
this.$=new Cast($$[$0], $$[$0-2]);
break;
case 14:
this.$ = new ToLower($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 15:
this.$ = new ToUpper($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 16:
this.$ = new Length($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 17:
this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 18:
this.$ = new ToString($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 19:
this.$ = new ToCharArray($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 20:
this.$ = new Truncate($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 21:
this.$= new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 22:
this.$= new IncreaseDecrease($$[$0-1], '++', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 23:
this.$= new IncreaseDecrease($$[$0-1], '--', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 24: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53:
this.$=$$[$0];
break;
case 25:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'plus', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 26:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'minus', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 27:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'multiply', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 28:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'division', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 29:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'power', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 30:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'module', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 31:
this.$= new ArithmeticOperation($$[$0],$$[$0],'negation', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 32:
this.$=$$[$0-1];
break;
case 33:
this.$= new RelationalOperation($$[$0-2],$$[$0],'==', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 34:
this.$= new RelationalOperation($$[$0-2],$$[$0],'!=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 35:
this.$= new RelationalOperation($$[$0-2],$$[$0],'<', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 36:
this.$= new RelationalOperation($$[$0-2],$$[$0],'>', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 37:
this.$= new RelationalOperation($$[$0-2],$$[$0],'<=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 38:
this.$= new RelationalOperation($$[$0-2],$$[$0],'>=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 39:
this.$= new LogicalOperation($$[$0],$$[$0],'!', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 40:
this.$= new LogicalOperation($$[$0-2],$$[$0],'&&', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 41:
this.$= new LogicalOperation($$[$0-2],$$[$0],'||', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 54:
this.$= new VariableAccess($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 55:
this.$= new VectorAccess($$[$0-3], $$[$0-1] ,_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 56:
this.$= new ListAccess($$[$0-5], $$[$0-2] ,_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 57:
this.$= new ModVectorList($$[$0-6], $$[$0-4],$$[$0-1] ,_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 58:
this.$= new ModVectorList($$[$0-8], $$[$0-5],$$[$0-1] ,_$[$0-8].first_line, _$[$0-8].first_column);
break;
case 59:
this.$=new Call($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 60: case 132:
$$[$0].unshift($$[$0-2]); this.$=$$[$0];
break;
case 61: case 133:
this.$=[$$[$0]];
break;
case 63: case 95: case 96: case 97: case 124: case 125:
this.$=$$[$0]
break;
case 64:
this.$= new Ternary($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 65:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]; console.log('entre a instrucciones');
break;
case 66:
this.$ = [$$[$0]]; console.log('entre a instruccion');
break;
case 67:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]; console.log('entre a instrucciones2');
break;
case 68:
this.$ = [$$[$0]]; console.log('entre a instruccion2');
break;
case 69: case 71: case 72: case 73: case 75: case 76: case 79: case 80: case 82: case 84: case 87: case 89: case 90: case 91:
this.$ = $$[$0];
break;
case 70:
this.$=new Main($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 74:
 console.log("error sintactico en linea " + (yylineno+1) );
break;
case 77: case 78: case 88:
this.$ = $$[$0-1];
break;
case 92:
this.$ = new Print(_$[$0-4].first_line,_$[$0-4].first_column ,$$[$0-2])
break;
case 93:
this.$=new Return(null,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 94:
this.$=new Return($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 98:
this.$=new MethodDeclaration($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 99:
this.$=new Block($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 101:
this.$=new VariableDeclaration($$[$0-1], $$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column )
break;
case 102:
this.$=new VariableDeclaration($$[$0-3], $$[$0-4], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column )
break;
case 103:
this.$=new Asignation($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column )
break;
case 104:
this.$=new Asignation($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column )
break;
case 105:
this.$=new VectorDeclaration($$[$0-7], $$[$0-10], $$[$0-4], $$[$0-2] ,_$[$0-10].first_line, _$[$0-10].first_column )
break;
case 106:
this.$=new VectorDeclaration($$[$0-5], $$[$0-8], $$[$0-8], $$[$0-2] ,_$[$0-8].first_line, _$[$0-8].first_column )
break;
case 107:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 108:
this.$ = [$$[$0]];
break;
case 109:
this.$=new ListDeclaration($$[$0-7], $$[$0-9], $$[$0-2],null ,_$[$0-11].first_line, _$[$0-11].first_column )
break;
case 110:
this.$=new ListDeclaration($$[$0-6], $$[$0-8], $$[$0-8], $$[$0-2] ,_$[$0-10].first_line, _$[$0-10].first_column )
break;
case 111:
this.$=new ListAddition($$[$0-6], $$[$0-2] ,_$[$0-6].first_line, _$[$0-6].first_column )
break;
case 112:
this.$ = new IfStatement($$[$0-3], $$[$0-1], $$[$0] ,_$[$0-5].first_line, _$[$0-5].first_column )
break;
case 113: case 114:
this.$ =$$[$0]
break;
case 115:
this.$ =null
break;
case 121: case 122: case 123:
this.$=new ForLoop($$[$0-5], $$[$0-4] ,$$[$0-2],$$[$0],_$[$0-7].first_line, _$[$0-7].first_column )
break;
case 129:
this.$ = new DoWhileLoop($$[$0-2], $$[$0-5] ,_$[$0-6].first_line, _$[$0-6].first_column )
break;
case 130:
this.$=new WhileLoop($$[$0-2], $$[$0] ,_$[$0-4].first_line, _$[$0-4].first_column )
break;
case 131:
this.$=new FunctionDeclaration($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 135:
this.$=new Parameter($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:15,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,74:3,77:4,78:$V6,79:6,80:7,81:8,92:$V7,94:10,95:11,96:12,97:$V8,105:$V9},{1:[3]},{2:$V0,5:[1,22],6:15,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,74:23,77:4,78:$V6,79:6,80:7,81:8,92:$V7,94:10,95:11,96:12,97:$V8,105:$V9},o($Va,[2,66]),o($Va,[2,69]),{39:[1,25],61:24},o($Va,[2,71]),o($Va,[2,72]),o($Va,[2,73]),{67:[1,26]},o($Vb,[2,95]),o($Vb,[2,96]),o($Vb,[2,97]),{20:[1,27]},{39:[1,28]},{39:[1,29],63:$Vc},{51:[1,31]},o($Vd,[2,2]),o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),{1:[2,1]},o($Va,[2,65]),{67:[1,32]},{20:$Ve},o($Va,[2,74]),{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:34,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{20:[1,66]},{20:[1,67],66:$Vx,67:$Vy},{64:[1,70]},{6:71,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5},o($Va,[2,70]),{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,21:$Vz,22:74,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50,69:72,70:73},{21:[1,75],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},o($VP,[2,24]),{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:91,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{6:93,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:92,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{56:[1,94]},o($VP,[2,42]),o($VP,[2,43]),o($VP,[2,44]),o($VP,[2,45]),o($VP,[2,46]),o($VP,[2,47]),o($VP,[2,48]),o($VP,[2,49]),o($VP,[2,50]),o($VP,[2,51]),o($VP,[2,52]),o($VP,[2,53]),o($VP,[2,54],{20:$Ve,63:[1,95]}),o($VP,[2,7]),o($VP,[2,8]),o($VP,[2,9]),o($VP,[2,10]),o($VP,[2,11]),o($VP,[2,12]),{20:[1,96]},{20:[1,97]},{20:[1,98]},{20:[1,99]},{20:[1,100]},{20:[1,101]},{20:[1,102]},{20:[1,103]},{6:106,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,21:$VQ,98:104,120:105},{6:106,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,21:$VQ,98:107,120:105},o($VR,[2,101]),{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:108,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{39:[1,109]},{52:[1,110]},{21:[1,111]},{21:[2,61],71:[1,112]},o($VS,[2,63],{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO}),{67:[1,113]},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:114,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:115,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:116,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:117,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:118,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:119,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:120,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:121,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:122,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:123,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:124,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:125,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:126,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:127,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:128,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},o($VP,[2,31]),{21:[1,129],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},{21:[1,130]},o($VP,[2,39]),{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:131,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50,63:[1,132]},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:133,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:134,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:135,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:136,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:137,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:138,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:139,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:140,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{21:[1,141]},{21:[2,133],71:[1,142]},{39:[1,143]},{21:[1,144]},{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,67:[1,145],72:$VO},{66:[1,146]},{39:[1,147]},o($VP,[2,59]),{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,21:$Vz,22:74,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50,69:148,70:73},o($Vb,[2,92]),o($VT,[2,25],{45:$VC,46:$VD,47:$VE,48:$VF}),o($VT,[2,26],{45:$VC,46:$VD,47:$VE,48:$VF}),o($VU,[2,27],{47:$VE}),o($VU,[2,28],{47:$VE}),o($VU,[2,29]),o($VU,[2,30],{47:$VE}),o($VV,[2,33],{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF}),o($VV,[2,34],{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF}),o($VV,[2,35],{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF}),o($VV,[2,36],{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF}),o($VV,[2,37],{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF}),o($VV,[2,38],{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF}),o([21,57,58,64,67,71,72,73,101],[2,40],{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL}),o([21,58,64,67,71,72,73,101],[2,41],{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM}),{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO,73:[1,149]},o($VP,[2,32]),{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:150,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,64:[1,151],72:$VO},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:152,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{21:[1,153],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},{21:[1,154],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},{21:[1,155],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},{21:[1,156],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},{21:[1,157],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},{21:[1,158],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},{21:[1,159],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},{21:[1,160],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},{99:161,100:$VW},{6:106,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,21:$VQ,98:163,120:105},o($VS,[2,135]),{99:164,100:$VW},o($VR,[2,102]),{100:[1,166],103:[1,165]},{66:[1,167]},{21:[2,60]},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:168,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},o($VP,[2,13]),o($VP,[2,55]),{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,64:[1,169],72:$VO},o($VP,[2,14]),o($VP,[2,15]),o($VP,[2,17]),o($VP,[2,16]),o($VP,[2,18]),o($VP,[2,19]),o($VP,[2,20]),o($VP,[2,21]),o($Va,[2,98]),{6:197,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,38:175,39:$VX,41:176,61:186,65:188,68:189,75:170,76:172,77:173,79:187,82:174,83:177,84:178,85:179,86:180,87:181,88:182,89:$VY,90:$VZ,91:185,92:$V7,93:$V_,94:10,95:11,96:12,101:[1,171],105:$V9,108:$V$,111:$V01,115:$V11,118:$V21,119:$V31},{21:[2,132]},o($Va,[2,131]),{6:198,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:200,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50,104:199},{33:[1,202],103:[1,201]},o([21,64,67,71,72,73,101],[2,64],{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN}),{64:[1,203]},{6:197,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,38:175,39:$VX,41:176,61:186,65:188,68:189,76:205,77:173,79:187,82:174,83:177,84:178,85:179,86:180,87:181,88:182,89:$VY,90:$VZ,91:185,92:$V7,93:$V_,94:10,95:11,96:12,101:[1,204],105:$V9,108:$V$,111:$V01,115:$V11,118:$V21,119:$V31},o($V41,[2,100]),o($V51,[2,68]),o($V51,[2,75]),o($V51,[2,76]),{67:[1,206]},{67:[1,207]},o($V51,[2,79]),o($V51,[2,80]),o($V51,[2,81]),o($V51,[2,82]),o($V51,[2,83]),o($V51,[2,84]),{67:[1,208]},{67:[1,209]},o($V51,[2,87]),{67:[1,210]},o($V51,[2,89]),o($V51,[2,90]),o($V51,[2,91]),{20:$Ve,40:$V61,42:$V71,63:[1,215],66:$V81,106:[1,211]},{20:[1,216]},{20:[1,217]},{20:[1,218]},{99:219,100:$VW},{20:[1,220]},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:222,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50,67:[1,221]},{39:$V91,63:$Vc},{63:[1,224]},{71:[1,226],101:[1,225]},o($Va1,[2,108],{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO}),{105:[1,227]},{20:[1,228]},o($VP,[2,56]),o($V41,[2,99]),o($V51,[2,67]),o($V51,[2,77]),o($V51,[2,78]),o($V51,[2,85]),o($V51,[2,86]),o($V51,[2,88]),{107:[1,229]},o($Vb1,[2,22]),o($Vb1,[2,23]),{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:230,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:231,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50,63:[1,232]},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:233,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:234,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{6:239,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,39:[1,238],83:236,94:237,116:235},{119:[1,240]},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:241,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},o($V51,[2,93]),{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,67:[1,242],72:$VO},{66:$Vx,67:$Vy},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:243,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{67:[1,244]},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:245,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{51:[1,246]},{16:[1,247]},{20:[1,248]},{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,67:[1,249],72:$VO},{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,64:[1,250],72:$VO},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:251,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{21:[1,252],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},{21:[1,253],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:254,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},o($Vc1,[2,124]),o($Vc1,[2,125]),{66:$V81},{39:$V91},{20:[1,255]},{21:[1,256],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},o($V51,[2,94]),{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,64:[1,257],72:$VO},o($Vb,[2,106]),o($Va1,[2,107],{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO}),{6:258,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5},{21:[1,259]},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:260,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},o([7,8,9,10,11,13,14,15,16,17,18,20,24,25,27,29,31,33,35,37,39,44,55,89,90,92,93,101,105,108,111,113,114,115,118,119],[2,103]),{66:[1,261]},{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,64:[1,262],72:$VO},{99:263,100:$VW},{100:[1,264]},{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,67:[1,265],72:$VO},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:266,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{99:267,100:$VW},{67:[1,268]},{52:[1,269]},{67:[1,270]},{21:[1,271],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:272,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{64:[1,273]},o($V51,[2,115],{109:274,110:[1,275]}),{112:276,113:[1,277],114:[1,278]},{38:280,39:[1,282],41:281,102:279},{21:[1,283],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},o($V51,[2,130]),o($Vb,[2,105]),{67:[1,284]},o($Vb,[2,110]),{67:[1,285]},{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,67:[1,286],72:$VO},{66:[1,287]},o($V51,[2,112]),{84:288,99:289,100:$VW,108:$V$},{101:[1,290],113:[1,291],114:[1,292]},{73:[1,293]},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:294,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{21:[1,295]},{21:[1,296]},{21:[1,297]},{40:$V61,42:$V71,66:[1,298]},{67:[1,299]},o($Vb,[2,109]),o($V51,[2,111]),o($V51,[2,57]),{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:300,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},o($V51,[2,113]),o($V51,[2,114]),o($V51,[2,116]),{73:[1,301]},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:302,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},{6:197,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,38:175,39:$VX,41:176,61:186,65:188,68:189,75:303,76:172,77:173,79:187,82:174,83:177,84:178,85:179,86:180,87:181,88:182,89:$VY,90:$VZ,91:185,92:$V7,93:$V_,94:10,95:11,96:12,105:$V9,108:$V$,111:$V01,115:$V11,118:$V21,119:$V31},{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO,73:[1,304]},{99:305,100:$VW},{99:306,100:$VW},{99:307,100:$VW},{12:35,13:$Vf,14:$Vg,15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:39,20:$Vl,22:308,23:40,24:$Vm,25:$Vn,26:42,27:$Vo,28:41,29:$Vp,30:43,31:$Vq,32:44,33:$Vr,34:45,35:$Vs,36:46,37:$Vt,39:$Vu,44:$Vv,55:$Vw,59:47,60:48,61:49,62:50},o($V51,[2,129]),{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,67:[1,309],72:$VO},{6:197,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,38:175,39:$VX,41:176,61:186,65:188,68:189,75:310,76:172,77:173,79:187,82:174,83:177,84:178,85:179,86:180,87:181,88:182,89:$VY,90:$VZ,91:185,92:$V7,93:$V_,94:10,95:11,96:12,105:$V9,108:$V$,111:$V01,115:$V11,118:$V21,119:$V31},{43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO,73:[1,311]},{6:197,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,38:175,39:$VX,41:176,61:186,65:188,68:189,76:205,77:173,79:187,82:174,83:177,84:178,85:179,86:180,87:181,88:182,89:$VY,90:$VZ,91:185,92:$V7,93:$V_,94:10,95:11,96:12,101:[1,312],105:$V9,108:$V$,111:$V01,115:$V11,118:$V21,119:$V31},{6:197,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,38:175,39:$VX,41:176,61:186,65:188,68:189,75:313,76:172,77:173,79:187,82:174,83:177,84:178,85:179,86:180,87:181,88:182,89:$VY,90:$VZ,91:185,92:$V7,93:$V_,94:10,95:11,96:12,105:$V9,108:$V$,111:$V01,115:$V11,118:$V21,119:$V31},o($V51,[2,121]),o($V51,[2,122]),o($V51,[2,123]),{21:[2,104],43:$VA,44:$VB,45:$VC,46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,51:$VI,52:$VJ,53:$VK,54:$VL,57:$VM,58:$VN,72:$VO},o($V51,[2,58]),{6:197,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,38:175,39:$VX,41:176,61:186,65:188,68:189,76:205,77:173,79:187,82:174,83:177,84:178,85:179,86:180,87:181,88:182,89:$VY,90:$VZ,91:185,92:$V7,93:$V_,94:10,95:11,96:12,101:[1,314],105:$V9,108:$V$,111:$V01,115:$V11,118:$V21,119:$V31},{6:197,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,38:175,39:$VX,41:176,61:186,65:188,68:189,75:315,76:172,77:173,79:187,82:174,83:177,84:178,85:179,86:180,87:181,88:182,89:$VY,90:$VZ,91:185,92:$V7,93:$V_,94:10,95:11,96:12,105:$V9,108:$V$,111:$V01,115:$V11,118:$V21,119:$V31},o($V51,[2,117]),o($Vd1,[2,120],{94:10,95:11,96:12,77:173,82:174,38:175,41:176,83:177,84:178,85:179,86:180,87:181,88:182,91:185,61:186,79:187,65:188,68:189,6:197,76:205,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,39:$VX,89:$VY,90:$VZ,92:$V7,93:$V_,105:$V9,108:$V$,111:$V01,115:$V11,118:$V21,119:$V31}),o($V51,[2,118]),o($Vd1,[2,119],{94:10,95:11,96:12,77:173,82:174,38:175,41:176,83:177,84:178,85:179,86:180,87:181,88:182,91:185,61:186,79:187,65:188,68:189,6:197,76:205,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,39:$VX,89:$VY,90:$VZ,92:$V7,93:$V_,105:$V9,108:$V$,111:$V01,115:$V11,118:$V21,119:$V31})],
defaultActions: {22:[2,1],148:[2,60],163:[2,132]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  // importar tipos
  const {Primitive} = require('./expressions/Primitive')
  const {ArithmeticOperation} = require('./expressions/ArithmeticOperation')
  const {RelationalOperation} = require('./expressions/RelationalOperation')
  const {LogicalOperation} = require('./expressions/LogicalOperation')
  const {VariableAccess} = require('./expressions/VariableAccess')
  const {VectorAccess} = require('./expressions/VectorAccess')
  const {ListAccess} = require('./expressions/ListAccess')
  const {Ternary} = require('./expressions/Ternary')
  const {TypeOf} = require('./expressions/TypeOf')
  const {ToCharArray} = require('./expressions/ToCharArray')
  const {Cast} = require('./expressions/Cast')
  const {ToUpper} = require('./expressions/ToUpper')
  const {ToString} = require('./expressions/ToString')
  const {Round} = require('./expressions/Round')
  const {Truncate} = require('./expressions/Truncate')
  const {Length} = require('./expressions/Length')
  const {Print} = require('./instruction/Print')
  const {VectorDeclaration} = require('./instruction/VectorDeclaration')
  const {ModVectorList} = require('./instruction/ModVectorList')
  const {IncreaseDecrease} = require('./instruction/IncreaseDecrease')
  const {ForLoop} = require('./instruction/ForLoop')
  const {WhileLoop} = require('./instruction/WhileLoop')
  const {DoWhileLoop} = require('./instruction/DoWhileLoop')
  const {Asignation} = require('./instruction/Asignation')
  const {Block} = require('./instruction/Block')
  const {MethodDeclaration} = require('./instruction/MethodDeclaration')
  const {IfStatement} = require('./instruction/IfStatement')
  const {FunctionDeclaration} = require('./instruction/FunctionDeclaration')
  const {Call} = require('./instruction/Call')
  const {ListDeclaration} = require('./instruction/ListDeclaration')
  const {Return} = require('./instruction/Return')
  const {ToLower} = require('./expressions/ToLower')
  const {VariableDeclaration} = require('./instruction/VariableDeclaration')
  const {ListAddition} = require('./instruction/ListAddition')
  const {Main} = require('./instruction/Main')
  const {Type} = require('./abstract/Type')
  const {Singleton} = require('./Singleton')
  const {Parameter} = require('./Parameter')
  const {Error} = require('./Error')

  const instance = Singleton.getInstance();
  

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:console.log("Se encontró token con valor: " + yy_.yytext); return 9;
break;
case 4:console.log("Se encontró token con valor: " + yy_.yytext); return 18;
break;
case 5:console.log("Se encontró token con valor: " + yy_.yytext); return 17;
break;
case 6:console.log("Se encontró token con valor: " + yy_.yytext); return 10;
break;
case 7:console.log("Se encontró token con valor: " + yy_.yytext); return 8;
break;
case 8:console.log("Se encontró token con valor: " + yy_.yytext); return 7;
break;
case 9:console.log("Se encontró token con valor: " + yy_.yytext); return 11;
break;
case 10:console.log("Se encontró token con valor: " + yy_.yytext); return 105;
break;
case 11:console.log("Se encontró token con valor: " + yy_.yytext); return 107;
break;
case 12:console.log("Se encontró token con valor: " + yy_.yytext); return 108;
break;
case 13:console.log("Se encontró token con valor: " + yy_.yytext); return 110;
break;
case 14:console.log("Se encontró token print con valor: " + yy_.yytext); return 92;
break;
case 15:console.log("Se encontró token con valor: " + yy_.yytext); return 111;
break;
case 16:console.log("Se encontró token con valor: " + yy_.yytext); return 114;
break;
case 17:console.log("Se encontró token con valor: " + yy_.yytext); return 113;
break;
case 18:console.log("Se encontró token con valor: " + yy_.yytext); return 89;
break;
case 19:console.log("Se encontró token con valor: " + yy_.yytext); return 119;
break;
case 20:console.log("Se encontró token con valor: " + yy_.yytext); return 115;
break;
case 21:console.log("Se encontró token con valor: " + yy_.yytext); return 118;
break;
case 22:console.log("Se encontró token con valor: " + yy_.yytext); return 90;
break;
case 23:console.log("Se encontró token con valor: " + yy_.yytext); return 93;
break;
case 24:console.log("Se encontró token con valor: " + yy_.yytext); return 97;
break;
case 25:console.log("Se encontró token con valor: " + yy_.yytext); return 24;
break;
case 26:console.log("Se encontró token con valor: " + yy_.yytext); return 25;
break;
case 27:console.log("Se encontró token con valor: " + yy_.yytext); return 27;
break;
case 28:console.log("Se encontró token con valor: " + yy_.yytext); return 35;
break;
case 29:console.log("Se encontró token con valor: " + yy_.yytext); return 29;
break;
case 30:console.log("Se encontró token con valor: " + yy_.yytext); return 37;
break;
case 31:console.log("Se encontró token con valor: " + yy_.yytext); return 31;
break;
case 32:console.log("Se encontró token con valor: " + yy_.yytext); return 33;
break;
case 33:console.log("Se encontró token con valor: " + yy_.yytext); return 78;
break;
case 34:console.log("Se encontró token con valor: " + yy_.yytext); return 103;
break;
case 35:console.log("Se encontró token id con valor: " + yy_.yytext); return 39;
break;
case 36:console.log("Se encontró token con valor: " + yy_.yytext); return 14;
break;
case 37:console.log("Se encontró token con valor: " + yy_.yytext); return 13;
break;
case 38:console.log("Se encontró token con valor: " + yy_.yytext); return 15;
break;
case 39:console.log("Se encontró token con valor: " + yy_.yytext); return 16;
break;
case 40:console.log("Se encontró token con valor: " + yy_.yytext);     return 67;
break;
case 41:console.log("Se encontró token con valor: " + yy_.yytext);     return 49;
break;
case 42:console.log("Se encontró token con valor: " + yy_.yytext);    return 40;
break;
case 43:console.log("Se encontró token con valor: " + yy_.yytext);    return 42;
break;
case 44:console.log("Se encontró token con valor: " + yy_.yytext);     return 53;
break;
case 45:console.log("Se encontró token con valor: " + yy_.yytext);     return 54;
break;
case 46:console.log("Se encontró token con valor: " + yy_.yytext);     return 66;
break;
case 47:console.log("Se encontró token con valor: " + yy_.yytext);     return 50;
break;
case 48:console.log("Se encontró token con valor: " + yy_.yytext);     return 43;
break;
case 49:console.log("Se encontró token con valor: " + yy_.yytext);     return 44;
break;
case 50:console.log("Se encontró token con valor: " + yy_.yytext);     return 45;
break;
case 51:console.log("Se encontró token con valor: " + yy_.yytext);     return 46;
break;
case 52:console.log("Se encontró token con valor: " + yy_.yytext);     return 47;
break;
case 53:console.log("Se encontró token con valor: " + yy_.yytext);     return 48;
break;
case 54:console.log("Se encontró token con valor: " + yy_.yytext);     return 51;
break;
case 55:console.log("Se encontró token con valor: " + yy_.yytext);     return 52;
break;
case 56:console.log("Se encontró token con valor: " + yy_.yytext);     return 55;
break;
case 57:console.log("Se encontró token con valor: " + yy_.yytext);     return 72;
break;
case 58:console.log("Se encontró token con valor: " + yy_.yytext);     return 73;
break;
case 59:console.log("Se encontró token con valor: " + yy_.yytext);     return 58;
break;
case 60:console.log("Se encontró token con valor: " + yy_.yytext);     return 57;
break;
case 61:console.log("Se encontró token con valor: " + yy_.yytext);     return 20;
break;
case 62:console.log("Se encontró token con valor: " + yy_.yytext);     return 21;
break;
case 63:console.log("Se encontró token con valor: " + yy_.yytext);     return 100;
break;
case 64:console.log("Se encontró token con valor: " + yy_.yytext);     return 101;
break;
case 65:console.log("Se encontró token con valor: " + yy_.yytext);     return 71;
break;
case 66:console.log("Se encontró token con valor: " + yy_.yytext);     return 63;
break;
case 67:console.log("Se encontró token con valor: " + yy_.yytext);     return 64;
break;
case 68:console.log("Se encontró token con valor: " + yy_.yytext);     return 106;
break;
case 69:return 5;
break;
case 70: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                          const newError = new Error('Léxico', 'token desconocido: ' + yy_.yytext,  yy_.yylloc.first_line, yy_.yylloc.first_column)
                          const consoleResponse = 'Error léxico'+ ' ' + yy_.yytext + ' en linea y columna: ' + yy_.yylloc.first_line + yy_.yylloc.first_column + ' genere el reporte de errores para mas detalles'
                          instance.addError(newError)
                          instance.appendConsole(consoleResponse)

                        
break;
}
},
rules: [/^(?:[\r\f\s\t\n])/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:print\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Length\b)/i,/^(?:Truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:new\b)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:[\']([^']|\\n|\\t|(\\)(\\))?[\'])/i,/^(?:[\"](\\"|[^"])*[\"])/i,/^(?:;)/i,/^(?:==)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
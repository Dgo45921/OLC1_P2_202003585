/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,5],$V7=[1,11],$V8=[1,13],$V9=[2,5,7,8,9,10,11,74,84,95],$Va=[21,39,55,66],$Vb=[1,28],$Vc=[1,47],$Vd=[1,48],$Ve=[1,49],$Vf=[1,50],$Vg=[1,51],$Vh=[1,52],$Vi=[1,32],$Vj=[1,53],$Vk=[1,54],$Vl=[1,56],$Vm=[1,55],$Vn=[1,57],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,46],$Vs=[1,31],$Vt=[1,33],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,80],$VG=[1,81],$VH=[1,82],$VI=[1,83],$VJ=[21,41,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,67,68,69,94],$VK=[2,5,7,8,9,10,11,21,41,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,67,68,69,74,84,94,95],$VL=[21,45],$VM=[21,41,45,46,47,52,53,54,55,56,57,60,61,67,68,69,94],$VN=[21,41,45,46,47,48,49,51,52,53,54,55,56,57,60,61,67,68,69,94],$VO=[21,41,45,52,53,54,55,56,57,60,61,67,68,69,94],$VP=[45,94];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCTIONS":4,"EOF":5,"TYPE":6,"reserved_char":7,"reserved_boolean":8,"reserved_int":9,"reserved_double":10,"reserved_string":11,"OPERAND":12,"integerNum":13,"decimalNum":14,"charValue":15,"stringValue":16,"reserved_false":17,"reserved_true":18,"CAST":19,"(":20,")":21,"EXPRESSION":22,"LOWER_UPPER":23,"reserved_toLower":24,"reserved_toUpper":25,"LENGTH":26,"reserved_length":27,"ROUND":28,"reserved_round":29,"TO_STRING":30,"reserved_tostring":31,"TO_CHAR_ARRAY":32,"reserved_toCharArray":33,"TRUNCATE":34,"reserved_truncate":35,"TYPE_OF":36,"reserved_typeof":37,"INCREASE":38,"identifier":39,"++":40,";":41,"DECREASE":42,"--":43,"EXPRESSIONS":44,",":45,"+":46,"-":47,"*":48,"/":49,"^":50,"%":51,"==":52,"!=":53,"<":54,">":55,"<=":56,">=":57,"!":58,"EXPRESION":59,"&&":60,"||":61,"VECTOR_ACCESS":62,"LIST_ACCESS":63,"FUNCTION_CALL":64,"TERNARY":65,"[":66,"]":67,"?":68,":":69,"INSTRUCTION":70,"INSTRUCTIONS2":71,"INSTRUCTION2":72,"DECLARATION":73,"reserved_main":74,"PRINT":75,"LIST_ADDITION":76,"IF_STATEMENT":77,"SWITCH_STATEMENT":78,"FOR_STATEMENT":79,"DO_WHILE_STATEMENT":80,"reserved_break":81,"reserved_continue":82,"RETURN_STATEMENT":83,"reserved_print":84,"reserved_return":85,"VARIABLE_DECLARATION":86,"VECTOR_DECLARATION":87,"LIST_DECLARATION":88,"=":89,"VARIABLE_ASIGNATION":90,"reserved_new":91,"{":92,"VALUE_LIST":93,"}":94,"reserved_list":95,".":96,"reserved_add":97,"reserved_if":98,"reserved_else":99,"ELSE_IF_STATEMENT":100,"reserved_switch":101,"CASE_LIST":102,"reserved_default":103,"reserved_case":104,"WHILE_STATEMENT":105,"reserved_while":106,"reserved_for":107,"FOR_FIRST_CONDITION":108,"FOR_THIRD_CONDITION":109,"reserved_do":110,"FUNCTION_DECLARATION":111,"PARAMETERS":112,"reserved_void":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"reserved_char",8:"reserved_boolean",9:"reserved_int",10:"reserved_double",11:"reserved_string",13:"integerNum",14:"decimalNum",15:"charValue",16:"stringValue",17:"reserved_false",18:"reserved_true",20:"(",21:")",24:"reserved_toLower",25:"reserved_toUpper",27:"reserved_length",29:"reserved_round",31:"reserved_tostring",33:"reserved_toCharArray",35:"reserved_truncate",37:"reserved_typeof",39:"identifier",40:"++",41:";",43:"--",45:",",46:"+",47:"-",48:"*",49:"/",50:"^",51:"%",52:"==",53:"!=",54:"<",55:">",56:"<=",57:">=",58:"!",59:"EXPRESION",60:"&&",61:"||",66:"[",67:"]",68:"?",69:":",74:"reserved_main",81:"reserved_break",82:"reserved_continue",84:"reserved_print",85:"reserved_return",89:"=",91:"reserved_new",92:"{",94:"}",95:"reserved_list",96:".",97:"reserved_add",98:"reserved_if",99:"reserved_else",101:"reserved_switch",103:"reserved_default",104:"reserved_case",106:"reserved_while",107:"reserved_for",110:"reserved_do",113:"reserved_void"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[19,4],[23,4],[23,4],[26,4],[28,4],[30,4],[32,4],[34,4],[36,4],[38,3],[42,3],[44,3],[44,1],[22,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,3],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[62,4],[63,6],[64,4],[64,3],[65,5],[4,2],[4,1],[71,2],[71,1],[70,1],[70,2],[70,1],[70,2],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,2],[72,2],[72,1],[72,1],[72,1],[75,5],[83,2],[83,3],[73,1],[73,1],[73,1],[86,3],[86,5],[90,4],[90,4],[87,11],[87,9],[93,3],[93,1],[88,12],[76,7],[77,7],[77,11],[77,8],[77,12],[100,9],[100,8],[78,7],[78,9],[78,10],[102,5],[102,4],[105,7],[79,9],[108,1],[108,1],[109,2],[109,2],[109,3],[80,9],[111,8],[111,8],[112,4],[112,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log('ya entre'); return $$[$0-1];
break;
case 2:
this.$ = Type.CHAR 
break;
case 3:
this.$ = Type.BOOLEAN
break;
case 4:
this.$ = Type.INT
break;
case 5:
this.$ = Type.DOUBLE
break;
case 6:
this.$ = Type.STRING
break;
case 7:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.INT);
break;
case 8:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.DOUBLE);
break;
case 9:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.CHAR);
break;
case 10:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.STRING);
break;
case 11: case 12:
this.$ = new Primitive(_$[$0].first_line,_$[$0].first_column ,$$[$0], Type.BOOLEAN);
break;
case 13:
this.$=new Cast($$[$0], $$[$0-2]);
break;
case 14:
this.$ = new ToLower($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 15:
this.$ = new ToUpper($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 17:
this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 18:
this.$ = new ToString($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 20:
this.$ = new Truncate($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 21:
this.$= new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 26: case 44: case 45: case 46: case 48: case 50: case 51: case 55:
this.$=$$[$0];
break;
case 27:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'plus', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 28:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'minus', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 29:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'multiply', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 30:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'division', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 31:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'power', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 32:
this.$= new ArithmeticOperation($$[$0-2],$$[$0],'module', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 33:
this.$= new ArithmeticOperation($$[$0],$$[$0],'negation', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 34:
this.$=$$[$0-1];
break;
case 35:
this.$= new RelationalOperation($$[$0-2],$$[$0],'==', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 36:
this.$= new RelationalOperation($$[$0-2],$$[$0],'!=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 37:
this.$= new RelationalOperation($$[$0-2],$$[$0],'<', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 38:
this.$= new RelationalOperation($$[$0-2],$$[$0],'>', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 39:
this.$= new RelationalOperation($$[$0-2],$$[$0],'<=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 40:
this.$= new RelationalOperation($$[$0-2],$$[$0],'>=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 41:
this.$= new LogicalOperation($$[$0],$$[$0],'!', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 42:
this.$= new LogicalOperation($$[$0-2],$$[$0],'&&', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 43:
this.$= new LogicalOperation($$[$0-2],$$[$0],'||', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 56:
this.$= new VariableAccess($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 61:
this.$= new Ternary($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 62:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]; console.log('entre a instrucciones');
break;
case 63:
this.$ = [$$[$0]]; console.log('entre a instruccion');
break;
case 66: case 68: case 82:
this.$ = $$[$0];
break;
case 69:



             console.log("error sintactico en linea " + (yylineno+1) );

           
break;
case 83:
this.$ = new Print(_$[$0-4].first_line,_$[$0-4].first_column ,$$[$0-2])
break;
case 86: case 87:
this.$=$$[$0]
break;
case 89:
this.$=new VariableDeclaration($$[$0-1], $$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column )
break;
case 90:
this.$=new VariableDeclaration($$[$0-3], $$[$0-4], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column )
break;
case 93:
this.$=new VectorDeclaration($$[$0-7], $$[$0-10], $$[$0-4], $$[$0-2] ,_$[$0-10].first_line, _$[$0-10].first_column )
break;
case 94:
this.$=new VectorDeclaration($$[$0-5], $$[$0-8], $$[$0-8], $$[$0-2] ,_$[$0-8].first_line, _$[$0-8].first_column )
break;
case 95:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 96:
this.$ = [$$[$0]];
break;
}
},
table: [{2:$V0,3:1,4:2,6:12,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,70:3,73:4,74:$V6,75:6,84:$V7,86:8,87:9,88:10,95:$V8},{1:[3]},{2:$V0,5:[1,19],6:12,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,70:20,73:4,74:$V6,75:6,84:$V7,86:8,87:9,88:10,95:$V8},o($V9,[2,63]),o($V9,[2,66]),{39:[1,22],64:21},o($V9,[2,68]),{41:[1,23]},o($V9,[2,86]),o($V9,[2,87]),o($V9,[2,88]),{20:[1,24]},{39:[1,25],66:[1,26]},{54:[1,27]},o($Va,[2,2]),o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),{1:[2,1]},o($V9,[2,62]),o($V9,[2,67]),{20:$Vb},o($V9,[2,69]),{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:29,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{41:[1,61],89:[1,62]},{67:[1,63]},{6:64,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,21:[1,66],22:67,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,44:65,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{21:[1,68],46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI},o($VJ,[2,26]),{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:84,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{6:86,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5,12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:85,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{59:[1,87]},o($VJ,[2,44]),o($VJ,[2,45]),o($VJ,[2,46]),o($VJ,[2,47]),o($VJ,[2,48]),o($VJ,[2,49]),o($VJ,[2,50]),o($VJ,[2,51]),o($VJ,[2,52]),o($VJ,[2,53]),o($VJ,[2,54]),o($VJ,[2,55]),o($VJ,[2,56],{20:$Vb,66:[1,88]}),o($VJ,[2,7]),o($VJ,[2,8]),o($VJ,[2,9]),o($VJ,[2,10]),o($VJ,[2,11]),o($VJ,[2,12]),{20:[1,89]},{20:[1,90]},{20:[1,91]},{20:[1,92]},{20:[1,93]},{20:[1,94]},{20:[1,95]},{20:[1,96]},o($V9,[2,89]),{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:97,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{39:[1,98]},{55:[1,99]},{21:[1,100],45:[1,101]},o($VK,[2,60]),o($VL,[2,25],{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI}),{41:[1,102]},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:103,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:104,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:105,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:106,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:107,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:108,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:109,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:110,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:111,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:112,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:113,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:114,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:115,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:116,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:117,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},o($VJ,[2,33]),{21:[1,118],46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI},{21:[1,119]},o($VJ,[2,41]),{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:120,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45,66:[1,121]},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:122,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:123,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:124,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:125,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:126,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:127,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:128,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:129,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{41:[1,130],46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI},{89:[1,131]},{39:[1,132]},o($VK,[2,59]),{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:133,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},o($V9,[2,83]),o($VM,[2,27],{48:$Vw,49:$Vx,50:$Vy,51:$Vz}),o($VM,[2,28],{48:$Vw,49:$Vx,50:$Vy,51:$Vz}),o($VN,[2,29],{50:$Vy}),o($VN,[2,30],{50:$Vy}),o($VN,[2,31]),o($VN,[2,32],{50:$Vy}),o($VO,[2,35],{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz}),o($VO,[2,36],{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz}),o($VO,[2,37],{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz}),o($VO,[2,38],{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz}),o($VO,[2,39],{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz}),o($VO,[2,40],{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz}),o([21,41,45,60,61,67,68,69,94],[2,42],{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF}),o([21,41,45,61,67,68,69,94],[2,43],{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG}),{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI,69:[1,134]},o($VJ,[2,34]),{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:135,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,67:[1,136],68:$VI},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:137,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{21:[1,138],46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI},{21:[1,139],46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI},{21:[1,140],46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI},{21:[1,141],46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI},{21:[1,142],46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI},{21:[1,143],46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI},{21:[1,144],46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI},{21:[1,145],46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI},o($V9,[2,90]),{91:[1,146],92:[1,147]},{89:[1,148]},o($VL,[2,24],{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI}),{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:149,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},o($VJ,[2,13]),o($VJ,[2,57]),{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,67:[1,150],68:$VI},o($VJ,[2,14]),o($VJ,[2,15]),o($VJ,[2,17]),o($VJ,[2,16]),o($VJ,[2,18]),o($VJ,[2,19]),o($VJ,[2,20]),o($VJ,[2,21]),{6:151,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:153,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45,93:152},{91:[1,154]},o([21,41,45,67,68,69,94],[2,61],{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH}),{67:[1,155]},{66:[1,156]},{45:[1,158],94:[1,157]},o($VP,[2,96],{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI}),{95:[1,159]},o($VJ,[2,58]),{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:160,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{41:[1,161]},{12:30,13:$Vc,14:$Vd,15:$Ve,16:$Vf,17:$Vg,18:$Vh,19:34,20:$Vi,22:162,23:35,24:$Vj,25:$Vk,26:37,27:$Vl,28:36,29:$Vm,30:38,31:$Vn,32:39,33:$Vo,34:40,35:$Vp,36:41,37:$Vq,39:$Vr,47:$Vs,58:$Vt,62:42,63:43,64:44,65:45},{54:[1,163]},{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,67:[1,164],68:$VI},o($V9,[2,94]),o($VP,[2,95],{46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,60:$VG,61:$VH,68:$VI}),{6:165,7:$V1,8:$V2,9:$V3,10:$V4,11:$V5},{41:[1,166]},{55:[1,167]},o($V9,[2,93]),{41:[1,168]},o($V9,[2,97])],
defaultActions: {19:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  // importar tipos
  const {Primitive} = require('./expressions/Primitive')
  const {ArithmeticOperation} = require('./expressions/ArithmeticOperation')
  const {RelationalOperation} = require('./expressions/RelationalOperation')
  const {LogicalOperation} = require('./expressions/LogicalOperation')
  const {VariableAccess} = require('./expressions/VariableAccess')
  const {Ternary} = require('./expressions/Ternary')
  const {TypeOf} = require('./expressions/TypeOf')
  const {Cast} = require('./expressions/Cast')
  const {ToUpper} = require('./expressions/ToUpper')
  const {ToString} = require('./expressions/ToString')
  const {Round} = require('./expressions/Round')
  const {Truncate} = require('./expressions/Truncate')
  const {Print} = require('./instruction/Print')
  const {VectorDeclaration} = require('./instruction/VectorDeclaration')
  const {ToLower} = require('./expressions/ToLower')
  const {VariableDeclaration} = require('./instruction/VariableDeclaration')
  const {Type} = require('./abstract/Type')
  const {Singleton} = require('./Singleton')
  const {Error} = require('./Error')

  const instance = Singleton.getInstance();
  

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:console.log("Se encontró token con valor: " + yy_.yytext); return 9;
break;
case 4:console.log("Se encontró token con valor: " + yy_.yytext); return 18;
break;
case 5:console.log("Se encontró token con valor: " + yy_.yytext); return 17;
break;
case 6:console.log("Se encontró token con valor: " + yy_.yytext); return 10;
break;
case 7:console.log("Se encontró token con valor: " + yy_.yytext); return 8;
break;
case 8:console.log("Se encontró token con valor: " + yy_.yytext); return 7;
break;
case 9:console.log("Se encontró token con valor: " + yy_.yytext); return 11;
break;
case 10:console.log("Se encontró token con valor: " + yy_.yytext); return 95;
break;
case 11:console.log("Se encontró token con valor: " + yy_.yytext); return 97;
break;
case 12:console.log("Se encontró token con valor: " + yy_.yytext); return 98;
break;
case 13:console.log("Se encontró token con valor: " + yy_.yytext); return 99;
break;
case 14:console.log("Se encontró token print con valor: " + yy_.yytext); return 84;
break;
case 15:console.log("Se encontró token con valor: " + yy_.yytext); return 101;
break;
case 16:console.log("Se encontró token con valor: " + yy_.yytext); return 104;
break;
case 17:console.log("Se encontró token con valor: " + yy_.yytext); return 103;
break;
case 18:console.log("Se encontró token con valor: " + yy_.yytext); return 81;
break;
case 19:console.log("Se encontró token con valor: " + yy_.yytext); return 106;
break;
case 20:console.log("Se encontró token con valor: " + yy_.yytext); return 107;
break;
case 21:console.log("Se encontró token con valor: " + yy_.yytext); return 110;
break;
case 22:console.log("Se encontró token con valor: " + yy_.yytext); return 82;
break;
case 23:console.log("Se encontró token con valor: " + yy_.yytext); return 85;
break;
case 24:console.log("Se encontró token con valor: " + yy_.yytext); return 113;
break;
case 25:console.log("Se encontró token con valor: " + yy_.yytext); return 24;
break;
case 26:console.log("Se encontró token con valor: " + yy_.yytext); return 25;
break;
case 27:console.log("Se encontró token con valor: " + yy_.yytext); return 27;
break;
case 28:console.log("Se encontró token con valor: " + yy_.yytext); return 35;
break;
case 29:console.log("Se encontró token con valor: " + yy_.yytext); return 29;
break;
case 30:console.log("Se encontró token con valor: " + yy_.yytext); return 37;
break;
case 31:console.log("Se encontró token con valor: " + yy_.yytext); return 31;
break;
case 32:console.log("Se encontró token con valor: " + yy_.yytext); return 33;
break;
case 33:console.log("Se encontró token con valor: " + yy_.yytext); return 74;
break;
case 34:console.log("Se encontró token con valor: " + yy_.yytext); return 91;
break;
case 35:console.log("Se encontró token id con valor: " + yy_.yytext); return 39;
break;
case 36:console.log("Se encontró token con valor: " + yy_.yytext); return 14;
break;
case 37:console.log("Se encontró token con valor: " + yy_.yytext); return 13;
break;
case 38:console.log("Se encontró token con valor: " + yy_.yytext); return 15;
break;
case 39:console.log("Se encontró token con valor: " + yy_.yytext); return 16;
break;
case 40:console.log("Se encontró token con valor: " + yy_.yytext);     return 41;
break;
case 41:console.log("Se encontró token con valor: " + yy_.yytext);     return 52;
break;
case 42:console.log("Se encontró token con valor: " + yy_.yytext);    return 40;
break;
case 43:console.log("Se encontró token con valor: " + yy_.yytext);    return 43;
break;
case 44:console.log("Se encontró token con valor: " + yy_.yytext);     return 56;
break;
case 45:console.log("Se encontró token con valor: " + yy_.yytext);     return 57;
break;
case 46:console.log("Se encontró token con valor: " + yy_.yytext);     return 89;
break;
case 47:console.log("Se encontró token con valor: " + yy_.yytext);     return 53;
break;
case 48:console.log("Se encontró token con valor: " + yy_.yytext);     return 46;
break;
case 49:console.log("Se encontró token con valor: " + yy_.yytext);     return 47;
break;
case 50:console.log("Se encontró token con valor: " + yy_.yytext);     return 48;
break;
case 51:console.log("Se encontró token con valor: " + yy_.yytext);     return 49;
break;
case 52:console.log("Se encontró token con valor: " + yy_.yytext);     return 50;
break;
case 53:console.log("Se encontró token con valor: " + yy_.yytext);     return 51;
break;
case 54:console.log("Se encontró token con valor: " + yy_.yytext);     return 54;
break;
case 55:console.log("Se encontró token con valor: " + yy_.yytext);     return 55;
break;
case 56:console.log("Se encontró token con valor: " + yy_.yytext);     return 58;
break;
case 57:console.log("Se encontró token con valor: " + yy_.yytext);     return 68;
break;
case 58:console.log("Se encontró token con valor: " + yy_.yytext);     return 69;
break;
case 59:console.log("Se encontró token con valor: " + yy_.yytext);     return 61;
break;
case 60:console.log("Se encontró token con valor: " + yy_.yytext);     return 60;
break;
case 61:console.log("Se encontró token con valor: " + yy_.yytext);     return 20;
break;
case 62:console.log("Se encontró token con valor: " + yy_.yytext);     return 21;
break;
case 63:console.log("Se encontró token con valor: " + yy_.yytext);     return 92;
break;
case 64:console.log("Se encontró token con valor: " + yy_.yytext);     return 94;
break;
case 65:console.log("Se encontró token con valor: " + yy_.yytext);     return 45;
break;
case 66:console.log("Se encontró token con valor: " + yy_.yytext);     return 66;
break;
case 67:console.log("Se encontró token con valor: " + yy_.yytext);     return 67;
break;
case 68:console.log("Se encontró token con valor: " + yy_.yytext);     return 96;
break;
case 69:return 5;
break;
case 70: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                          const newError = new Error('Léxico', 'token desconocido: ' + yy_.yytext,  yy_.yylloc.first_line, yy_.yylloc.first_column)
                          const consoleResponse = 'Error léxico'+ ' ' + yy_.yytext + ' en linea y columna: ' + yy_.yylloc.first_line + yy_.yylloc.first_column + ' genere el reporte de errores para mas detalles'
                          instance.addError(newError)
                          instance.appendConsole(consoleResponse)

                        
break;
}
},
rules: [/^(?:[\r|\f|\s|\t|\n])/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:print\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:Length\b)/i,/^(?:Truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:toCharArray\b)/i,/^(?:main\b)/i,/^(?:new\b)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:[\']([^']|\\n|\\t|(\\)(\\))?[\'])/i,/^(?:[\"](\\"|[^"])*[\"])/i,/^(?:;)/i,/^(?:==)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}